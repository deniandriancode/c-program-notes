!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/deni/C/dsa/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210905.0/
MAX	deque.c	/^#define MAX /;"	d	file:
MAX	myqueue.c	/^#define MAX /;"	d	file:
MAX	stack.c	/^#define MAX /;"	d	file:
Node	queue.c	/^} Node;$/;"	t	typeref:struct:node	file:
Queue	myqueue.c	/^} Queue;$/;"	t	typeref:struct:queue	file:
Queue	queue.c	/^} Queue;$/;"	t	typeref:struct:queue	file:
SIZE	circularqueue.c	/^#define SIZE /;"	d	file:
addFront	deque.c	/^addFront (int *arr,$/;"	f	typeref:typename:void
addRear	deque.c	/^addRear (int *arr,$/;"	f	typeref:typename:void
array	hashtable_template.c	/^struct set *array;$/;"	v	typeref:struct:set *
capacity	hashtable_template.c	/^int capacity = 10;$/;"	v	typeref:typename:int
checkPrime	hashtable_template.c	/^int checkPrime(int n)$/;"	f	typeref:typename:int
count	deque.c	/^count (int *arr)$/;"	f	typeref:typename:int
count	myqueue.c	/^int count = -1;$/;"	v	typeref:typename:int
count	stack.c	/^int count = 0;$/;"	v	typeref:typename:int
createEmptyStack	stack.c	/^void createEmptyStack(st *s) {$/;"	f	typeref:typename:void
data	hashtable_template.c	/^  int data;$/;"	m	struct:set	typeref:typename:int	file:
data	linkedlist.c	/^    int data;$/;"	m	struct:node	typeref:typename:int	file:
delFront	deque.c	/^delFront (int *arr,$/;"	f	typeref:typename:int
delRear	deque.c	/^int delRear (int *arr,$/;"	f	typeref:typename:int
dequeue	circularqueue.c	/^int dequeue() {$/;"	f	typeref:typename:int
dequeue	myqueue.c	/^int dequeue(Queue *q) {$/;"	f	typeref:typename:int
dequeue	queue.c	/^int dequeue(Queue *q) {$/;"	f	typeref:typename:int
display	circularqueue.c	/^void display() {$/;"	f	typeref:typename:void
display	deque.c	/^display (int *arr)$/;"	f	typeref:typename:void
display	hashtable_template.c	/^void display()$/;"	f	typeref:typename:void
display	myqueue.c	/^void display(Queue *q) {$/;"	f	typeref:typename:void
empty	queue.c	/^int empty(Queue *q) {$/;"	f	typeref:typename:int
enqueue	circularqueue.c	/^void enqueue(int element) {$/;"	f	typeref:typename:void
enqueue	myqueue.c	/^void enqueue(Queue *q, int item) {$/;"	f	typeref:typename:void
enqueue	queue.c	/^void enqueue(Queue *q, int i) {$/;"	f	typeref:typename:void
front	circularqueue.c	/^int front = -1, rear = -1;$/;"	v	typeref:typename:int
front	myqueue.c	/^    int front;$/;"	m	struct:queue	typeref:typename:int	file:
front	queue.c	/^    Node *front;$/;"	m	struct:queue	typeref:typename:Node *	file:
getPrime	hashtable_template.c	/^int getPrime(int n)$/;"	f	typeref:typename:int
hashFunction	hashtable_template.c	/^int hashFunction(int key)$/;"	f	typeref:typename:int
init_array	hashtable_template.c	/^void init_array()$/;"	f	typeref:typename:void
insert	hashtable_template.c	/^void insert(int key, int data)$/;"	f	typeref:typename:void
isEmpty	circularqueue.c	/^int isEmpty() {$/;"	f	typeref:typename:int
isEmpty	myqueue.c	/^int isEmpty(Queue *q) {$/;"	f	typeref:typename:int
isFull	circularqueue.c	/^int isFull() {$/;"	f	typeref:typename:int
isFull	myqueue.c	/^int isFull(Queue *q) {$/;"	f	typeref:typename:int
isempty	deque.c	/^isempty (int *front, int *rear)$/;"	f	typeref:typename:int
isempty	stack.c	/^int isempty(st *s) {$/;"	f	typeref:typename:int
isfull	deque.c	/^isfull (int *front, int *rear)$/;"	f	typeref:typename:int
isfull	stack.c	/^int isfull(st *s) {$/;"	f	typeref:typename:int
item	queue.c	/^    int item;$/;"	m	struct:node	typeref:typename:int	file:
items	circularqueue.c	/^int items[SIZE];$/;"	v	typeref:typename:int[]
items	myqueue.c	/^    int items[MAX];$/;"	m	struct:queue	typeref:typename:int[]	file:
items	stack.c	/^  int items[MAX];$/;"	m	struct:stack	typeref:typename:int[]	file:
key	hashtable_template.c	/^  int key;$/;"	m	struct:set	typeref:typename:int	file:
main	circularqueue.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	deque.c	/^main (int argc,$/;"	f	typeref:typename:int
main	hashtable_template.c	/^int main()$/;"	f	typeref:typename:int
main	linkedlist.c	/^main (int argc,$/;"	f	typeref:typename:int
main	myqueue.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	queue.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	runner.c	/^main (int argc,$/;"	f	typeref:typename:int
main	stack.c	/^int main() {$/;"	f	typeref:typename:int
main	test.c	/^main (int argc,$/;"	f	typeref:typename:int
next	linkedlist.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
next	queue.c	/^    struct node *next;$/;"	m	struct:node	typeref:struct:node *	file:
node	linkedlist.c	/^struct node$/;"	s	file:
node	queue.c	/^typedef struct node {$/;"	s	file:
peek	myqueue.c	/^int peek(Queue *q) {$/;"	f	typeref:typename:int
pop	linkedlist.c	/^pop (struct node *head)$/;"	f	typeref:typename:int
pop	stack.c	/^void pop(st *s) {$/;"	f	typeref:typename:void
prepend	linkedlist.c	/^prepend (struct node **head,$/;"	f	typeref:typename:void
printLinkedList	linkedlist.c	/^printLinkedList (struct node *p)$/;"	f	typeref:typename:void
printStack	stack.c	/^void printStack(st *s) {$/;"	f	typeref:typename:void
push	linkedlist.c	/^push (struct node *head,$/;"	f	typeref:typename:void
push	stack.c	/^void push(st *s, int newitem) {$/;"	f	typeref:typename:void
queue	myqueue.c	/^typedef struct queue {$/;"	s	file:
queue	queue.c	/^typedef struct queue {$/;"	s	file:
rear	circularqueue.c	/^int front = -1, rear = -1;$/;"	v	typeref:typename:int
rear	myqueue.c	/^    int rear;$/;"	m	struct:queue	typeref:typename:int	file:
rear	queue.c	/^    Node *rear;$/;"	m	struct:queue	typeref:typename:Node *	file:
remove_element	hashtable_template.c	/^void remove_element(int key)$/;"	f	typeref:typename:void
set	hashtable_template.c	/^struct set$/;"	s	file:
shift	linkedlist.c	/^shift (struct node **head)$/;"	f	typeref:typename:int
size	hashtable_template.c	/^int size = 0;$/;"	v	typeref:typename:int
size_of_hashtable	hashtable_template.c	/^int size_of_hashtable()$/;"	f	typeref:typename:int
st	stack.c	/^typedef struct stack st;$/;"	t	typeref:struct:stack	file:
stack	stack.c	/^struct stack {$/;"	s	file:
top	stack.c	/^  int top;$/;"	m	struct:stack	typeref:typename:int	file:
